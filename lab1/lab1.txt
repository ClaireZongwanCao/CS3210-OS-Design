EXE2:
1. clean ax value
[f000:e066]    0xfe066:	xor    %ax,%ax

2. set stack segment to zero
[f000:e068]    0xfe068:	mov    %ax,%ss

3. set stack pointer to 0x7000
[f000:e06a]    0xfe06a:	mov    $0x7000,%esp

4. set edx to 0xf3c24
[f000:e070]    0xfe070:	mov    $0xf3c24,%edx
[f000:e076]    0xfe076:	jmp    0xfd124

5. clean ecx value
[f000:d124]    0xfd124:	mov    %eax,%ecx

6. clean interrupt and direction flag
[f000:d127]    0xfd127:	cli    
[f000:d128]    0xfd128:	cld

7. set eax to 0x8f(1000 1111)
[f000:d129]    0xfd129:	mov    $0x8f,%eax

8. set port 0x70 to al, to enable NMI-Non Maskable Interrupt
[f000:d12f]    0xfd12f:	out    %al,$0x70

9. port 0x71
[f000:d131]    0xfd131:	in     $0x71,%al

10.port 0x92, enable 0x92; system devices A20 line, fast A20
[f000:d133]    0xfd133:	in     $0x92,%al
[f000:d135]    0xfd135:	or     $0x2,%al
[f000:d137]    0xfd137:	out    %al,$0x92

11.set IDT
[f000:d139]    0xfd139:	lidtw  %cs:0x6690

12.set GDT
[f000:d13f]    0xfd13f:	lgdtw  %cs:0x6650

13.enable cr0’s first bit, enable protected mode
[f000:d145]    0xfd145:	mov    %cr0,%eax
[f000:d148]    0xfd148:	or     $0x1,%eax
[f000:d14c]    0xfd14c:	mov    %eax,%cr0

14.for protected mode’s jump
[f000:d14f]    0xfd14f:	ljmpl  $0x8,$0xfd157

15.set eax as 0x10
0xfd157:	mov    $0x10,%eax

16.set ds, es, ss, fs, gs as 0x10
0xfd15c:	mov    %eax,%ds
0xfd15e:	mov    %eax,%es
0xfd160:	mov    %eax,%ss
0xfd162:	mov    %eax,%fs
0xfd164:	mov    %eax,%gs    

EXE3:
After calling readsect(), bootmain.c will execute ((void (*)(void))(ELFHDR->e_entry))() and call the entry point from the ELF header. 
1. At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?
[   0:7c2a] => 0x7c2a:	mov    %eax,%cr0
[   0:7c2d] => 0x7c2d:	ljmp   $0x8,$0x7c32
Before long jump, set cr0’s 1st bit to 1.

2. What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?
(1) Last instruction of boot loader
0x7d61:	call   *0x10018   //jump to kernel’s entry point at 0x10000c
(2) First instruction of kernel
0x10000c: movw   $0x1234,0x472 //warm boot

3. Where is the first instruction of the kernel?
0x10000c

4. How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?
Using objdump -x obj/kern/kernel, we can obtain info about ELF.
ELF’s header shows how many sections and programs it has.


EXE5
1. Normal Mode:
(gdb) x/40i 0x7c00
   0x7c00:	cli    
   0x7c01:	cld    
   0x7c02:	xor    %ax,%ax
   0x7c04:	mov    %ax,%ds
   0x7c06:	mov    %ax,%es
   0x7c08:	mov    %ax,%ss
   0x7c0a:	in     $0x64,%al
   0x7c0c:	test   $0x2,%al
   0x7c0e:	jne    0x7c0a
   0x7c10:	mov    $0xd1,%al
   0x7c12:	out    %al,$0x64
   0x7c14:	in     $0x64,%al
   0x7c16:	test   $0x2,%al
   0x7c18:	jne    0x7c14
   0x7c1a:	mov    $0xdf,%al
   0x7c1c:	out    %al,$0x60
   0x7c1e:	lgdtw  0x7c64
   0x7c23:	mov    %cr0,%eax
   0x7c26:	or     $0x1,%eax
   0x7c2a:	mov    %eax,%cr0
   0x7c2d:	ljmp   $0x8,$0x7c32
   0x7c32:	mov    $0xd88e0010,%eax
   0x7c38:	mov    %ax,%es
   0x7c3a:	mov    %ax,%fs
   0x7c3c:	mov    %ax,%gs
   0x7c3e:	mov    %ax,%ss
   0x7c40:	mov    $0x7c00,%sp
2. Change -Ttext 0x7C00 into -Ttext 0x7C04
(gdb) x/40i 0x7c00
   0x7c00:	cli    
   0x7c01:	cld    
   0x7c02:	xor    %ax,%ax
   0x7c04:	mov    %ax,%ds
   0x7c06:	mov    %ax,%es
   0x7c08:	mov    %ax,%ss
   0x7c0a:	in     $0x64,%al
   0x7c0c:	test   $0x2,%al
   0x7c0e:	jne    0x7c0a
   0x7c10:	mov    $0xd1,%al
   0x7c12:	out    %al,$0x64
   0x7c14:	in     $0x64,%al
   0x7c16:	test   $0x2,%al
   0x7c18:	jne    0x7c14
   0x7c1a:	mov    $0xdf,%al
   0x7c1c:	out    %al,$0x60
   0x7c1e:	lgdtw  0x7c68
   0x7c23:	mov    %cr0,%eax
   0x7c26:	or     $0x1,%eax
   0x7c2a:	mov    %eax,%cr0
   0x7c2d:	ljmp   $0x8,$0x7c36
   0x7c32:	mov    $0xd88e0010,%eax
   0x7c38:	mov    %ax,%es
   0x7c3a:	mov    %ax,%fs
   0x7c3c:	mov    %ax,%gs
   0x7c3e:	mov    %ax,%ss
   0x7c40:	mov    $0x7c04,%sp
When executing limp at address 0x7c2d, it will use 0x7c36 by .Ttext claimed. However in reality it is loaded at 0x7c32. So this limp instruction will cause a error.

EXE6
1. BIOS enters the boot loader
(gdb) b * 0x7c00
Breakpoint 1 at 0x7c00
(gdb) c
Continuing.
[   0:7c00] => 0x7c00:	cli    
Breakpoint 1, 0x00007c00 in ?? ()
(gdb) x/8x 0x100000
0x100000:	0x00000000	0x00000000	0x00000000	0x00000000
0x100010:	0x00000000	0x00000000	0x00000000	0x00000000

2. Boot loader enters the kernel
(gdb) b * 0x10000c
Breakpoint 2 at 0x10000c
(gdb) c
Continuing.
The target architecture is assumed to be i386
=> 0x10000c:	movw   $0x1234,0x472
Breakpoint 2, 0x0010000c in ?? ()
(gdb) x/8x 0x100000
0x100000:	0x1badb002	0x00000000	0xe4524ffe	0x7205c766
0x100010:	0x34000004	0x0000b812	0x220f0011	0xc0200fd8

At the point the BIOS enters the boot loader, there is nothing in memory except for boot loader. At the point the boot loader enters the kernel, boot loader has been executed, so os kernel has been loaded into memory.

EXE7
1. Before movl %eax, %cr0
(gdb) x/20x 0x100000
0x100000:	0x1badb002	0x00000000	0xe4524ffe	0x7205c766
0x100010:	0x34000004	0x0000b812	0x220f0011	0xc0200fd8
0x100020:	0x0100010d	0xc0220f80	0x10002fb8	0xbde0fff0
0x100030:	0x00000000	0x110000bc	0x005fe8f0	0xfeeb0000
0x100040:	0x53e58955	0x8b14ec83	0x5c89085d	0x04c70424
(gdb) x/20x 0xf0100000
0xf0100000 <_start+4026531828>:	0x00000000	0x00000000	0x00000000	0x00000000
0xf0100010 <entry+4>:	0x00000000	0x00000000	0x00000000	0x00000000
0xf0100020 <entry+20>:	0x00000000	0x00000000	0x00000000	0x00000000
0xf0100030 <relocated+1>:	0x00000000	0x00000000	0x00000000	0x00000000
0xf0100040 <test_backtrace>:	0x00000000	0x00000000	0x00000000	0x00000000
2. After movl %eax, %cr0: 0x100000 has been mapped to 0xf0100000, so the memory in two addresses are the same.
(gdb) x/20x 0x100000
0x100000:	0x1badb002	0x00000000	0xe4524ffe	0x7205c766
0x100010:	0x34000004	0x0000b812	0x220f0011	0xc0200fd8
0x100020:	0x0100010d	0xc0220f80	0x10002fb8	0xbde0fff0
0x100030:	0x00000000	0x110000bc	0x005fe8f0	0xfeeb0000
0x100040:	0x53e58955	0x8b14ec83	0x5c89085d	0x04c70424
(gdb) x/20x 0xf0100000
0xf0100000 <_start+4026531828>:	0x1badb002	0x00000000	0xe4524ffe	0x7205c766
0xf0100010 <entry+4>:	0x34000004	0x0000b812	0x220f0011	0xc0200fd8
0xf0100020 <entry+20>:	0x0100010d	0xc0220f80	0x10002fb8	0xbde0fff0
0xf0100030 <relocated+1>:	0x00000000	0x110000bc	0x005fe8f0	0xfeeb0000
0xf0100040 <test_backtrace>:	0x53e58955	0x8b14ec83	0x5c89085d	0x04c70424
3. After mapping, the first two instructions are mov $relocated, %eax    jump *%eax
After commenting out the movl %eax, %cr0 in entry.S, using gdb to trace, we will get a error
(gdb) si
=> 0xf010002c <relocated>:	add    %al,(%eax)
relocated () at kern/entry.S:74
74		movl	$0x0,%ebp			# nuke frame pointer
(gdb) si
Remote connection closed

qemu: fatal: Trying to execute code outside RAM or ROM at 0xf010002c.

This is caused by mapping mistake.


EXE8
See Code
1. kern/console.c exports cputchar() which is used in kern/printf.c.
2.roll up one empty line

3. (1) fmt points to the format specifier - string "x %d, y %x, z %d\n”, ap points to the first argument that pushed to the stack - here it is x.
(2) vcprintf: two arguments fmt and ap, fmt points to "x %d, y %x, z %d\n”, ap points to x
va_arg: before calling va_arg, ap is the current stack address to print; after calling, ap points to the next stack address to print. Basically, va_arg is used to move ap from one arg to next arg.
cons_putc: the int to be printed on screen, here are 1, 3, 4.

4. output is “He110 World” 
57616 is hexadecimal is e110
Via ASCII table, we have 0x72: ‘r’; 0x6c: ’l’; 0x64: ‘d’; 0x00: ‘\0’. 
If the machine is big endian, i should be 0x726c6400. No need to change 57616.
5. y will be printed as the value which is stored in stack next to 3. This is a buffer overflow since the format string asks for 2 arguments but the program actually provides only 1. 
6. change va_start to make it start from high address in stack. change va_arg to make it move from high address to low address in stack.


EXE9
In kern/entry.S, 
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer

	# Set the stack pointer
	movl	$(bootstacktop),%esp

	# now to C code
	call	i386_init
so the initialization is setting %ebp as 0 and %esp as bootstacktop
Stack is located in .data part. The stack’s space is KSTKSIZE = 8 * PGSIZE = 32KB and bootstacktop points to the end of the stack.

EXE10
After setting a break point at 0xf0100040, we can find there are four operations related to stack.
f0100040:	55                   	push   %ebp   //4 bytes
f0100043:	53                   	push   %ebx   //4 bytes
f0100044:	83 ec 14             	sub    $0x14,%esp //20 bytes
f0100064:	e8 d7 ff ff ff       	call   f0100040 <test_backtrace> //4 bytes for eip
Total is 32 bytes

EXE11
See Code
 
EXE12
See Code
