1.What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

To distinguish those exceptions/interrupts and handle them differently. We can provide different handler functions with different parameters (e.g. its descriptor privilege level, whether it is an exception or an interrupt)

2.Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint‘s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint‘s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?
 
Setting exception 14’s privilege as 0(kernel) to make the user/softint program behave correctly.
When we trigger exception 14, the system found we do not have such permission, so it will trigger the exception 13( general protection fault).
If kernel allows softint‘s int $14 instruction to invoke the kernel’s page fault handler, then the user can modify kernel and do some bad things.


